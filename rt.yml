## Install Prereqs
- name: Create RT installation dir
  file: path={{ rt_install_prefix }} state=directory mode=0755 owner=root group=root

- name: Install prereq packages (APT)
  tags: rt-apt
  apt: name={{ item }}
  with_lines: cat files/rt_prereq_packages_ubuntu.txt

- name: Install cpanm
  apt: name=cpanminus
  tags: cpanm
- name: Install other prereq packages (CPAN)
  tags: cpanm
  cpanm: name={{ item.name }} version={{ item.version }}
  with_items:
    - { name: 'Business::Hours', version: '' }
    - { name: 'HTML::FormatText::WithLinks::AndTables', version: '' }
    - { name: 'Data::Page::Pageset', version: '' }
    - { name: 'Mozilla::CA', version: '' }
    - { name: 'Encode', version: '2.64' }
    - { name: 'GD::Graph', version: '1.47' }

## Install RT itself
- name: Download and unpack RT
  unarchive:
    copy: no
    src: "{{ rt_source_url }}"
    dest: "{{ rt_source_dest }}"
    creates: "{{ rt_source_unpacked_dir }}"

- name: Configure RT
  shell: >
    ./configure --prefix={{ rt_install_prefix }} --with-web-group=www-data
    --with-web-user=www-data --with-db-rt-user=rt4 --enable-graphviz --enable-gd --enable-smime
  args:
    chdir: "{{ rt_source_unpacked_dir }}"
    creates: "{{ rt_source_unpacked_dir}}/config.log"
- name: Make testdeps
  shell: make testdeps
  args:
    chdir: "{{ rt_source_unpacked_dir }}"
    creates: "{{ rt_install_prefix }}/etc"
- name: Make install
  shell: make install
  args:
    chdir: "{{ rt_source_unpacked_dir }}"
    creates: "{{ rt_install_prefix }}/etc"

## Random password generation
# Oh boy, this is ugly. Shame on me.
- block:
  - name: Stat password file
    stat: path="{{ rt_generated_password_file }}"
    register: res_gen_passwd_file

  - name: Generate random password locally on control machine
    when: not res_gen_passwd_file.stat.exists
    local_action: command makepasswd -l 12
    register: res_get_password

  - name: Save generated password
    when: not res_gen_passwd_file.stat.exists
    copy:
      content: "{{ res_get_password.stdout }}"
      dest: "{{ rt_generated_password_file }}"
      owner: root
      mode: 0600

  - name: Read password from file
    command: cat {{ rt_generated_password_file }}
    register: res_get_password
    changed_when: False

  - name: Set RT DB password fact to the one read from file
    no_log: true
    set_fact: rt_real_dbpass="{{ res_get_password.stdout }}"
  when: not use_vault and rt_dbpass == "_RANDOM_GEN_"
  tags: rt-passwd-gen

- name: Set RT DB password fact to the one given in the playbook
  set_fact: rt_real_dbpass="{{ rt_dbpass }}"
  when: not use_vault and rt_dbpass != "_RANDOM_GEN_"
  no_log: true
  tags: rt-passwd-gen

# Configure RT
- name: Create RT_SiteConfig.pm
  tags: rt-config
  template:
    src: files/etc/rt/RT_SiteConfig.pm.j2
    dest: "{{ rt_install_prefix }}/etc/RT_SiteConfig.pm"
  notify: restart rt-fcgi

- name: Initialize Database
  tags: rt-setup-database
  command: >
    /usr/bin/perl -I{{ rt_install_prefix }}/local/lib -I{{ rt_install_prefix}}/lib
    sbin/rt-setup-database --action init --dba-password '{{ prompt_mysql_root_password }}'
  args:
    creates: /var/lib/mysql/rt4
    chdir: "{{ rt_source_unpacked_dir }}"

# TODO:
# /etc/cron.d/rt4
# plugins
# mail gateway configuration
